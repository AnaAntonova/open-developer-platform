"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[242],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3919:(e,t,n)=>{function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!a(e)}n.d(t,{b:()=>a,Z:()=>o})},4996:(e,t,n)=>{n.d(t,{C:()=>i,Z:()=>r});var a=n(2263),o=n(3919);function i(){var e=(0,a.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var i=void 0===a?{}:a,r=i.forcePrependBaseUrl,s=void 0!==r&&r,l=i.absolute,p=void 0!==l&&l;if(!n)return n;if(n.startsWith("#"))return n;if((0,o.b)(n))return n;if(s)return t+n;var u=n.startsWith(t)?n:t+n.replace(/^\//,"");return p?e+u:u}(i,n,e,t)}}}function r(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},6667:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>l,contentTitle:()=>p,metadata:()=>u,toc:()=>c,default:()=>m});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=n(4996),s=["components"],l={id:"intro",title:"Continuous Integration"},p=void 0,u={unversionedId:"development-infrastructure/continuous-integration/intro",id:"development-infrastructure/continuous-integration/intro",isDocsHomePage:!1,title:"Continuous Integration",description:"Continuous Integration (CI) allows developers to run different type of validation processes automatically at commit / merge time, in order to identify problems earlier.  As a result, configuring CI is inherently language and eco-system specific (see the Release and deployment section below).",source:"@site/../docs/development-infrastructure/continuous-integration/intro.mdx",sourceDirName:"development-infrastructure/continuous-integration",slug:"/development-infrastructure/continuous-integration/intro",permalink:"/docs/development-infrastructure/continuous-integration/intro",editUrl:"https://github.com/finos/open-developer-platform/edit/master/website/../docs/development-infrastructure/continuous-integration/intro.mdx",version:"current",frontMatter:{id:"intro",title:"Continuous Integration"},sidebar:"mainSidebar",previous:{title:"Project Collaboration",permalink:"/docs/project-collaboration"},next:{title:"Clojure",permalink:"/docs/development-infrastructure/continuous-integration/clojure"}},c=[{value:"GitHub Actions",id:"github-actions",children:[]},{value:"Travis CI",id:"travis-ci",children:[{value:"Example of Configuring Integration Testing",id:"example-of-configuring-integration-testing",children:[]}]},{value:"Azure Pipelines",id:"azure-pipelines",children:[]},{value:"MyGet",id:"myget",children:[]},{value:"Release and deployment",id:"release-and-deployment",children:[{value:"Continuous (artifact) deployment in Java",id:"continuous-artifact-deployment-in-java",children:[]},{value:"Continuous release in Python",id:"continuous-release-in-python",children:[]},{value:"Continuous release in NodeJS",id:"continuous-release-in-nodejs",children:[]}]}],d={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Continuous Integration (CI) allows developers to run different type of validation processes automatically at commit / merge time, in order to identify problems earlier.  As a result, configuring CI is inherently language and eco-system specific (see the ",(0,i.kt)("inlineCode",{parentName:"p"},"Release and deployment")," section below)."),(0,i.kt)("p",null,"The Open Developer Platform facilitates adoption CI tools and services that have been either requested by projects or provided by vendors, like WhiteSource, GitHub and RedHat, who offered their services to FINOS project teams and improve their build pipelines."),(0,i.kt)("p",null,"Below are listed the CI engines that we have been adopted by FINOS projects; although in the past the majority of project used Travis CI, we've seen our community shifting towards GitHub Actions, following ",(0,i.kt)("a",{parentName:"p",href:"https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/"},"their new release in 2019"),"."),(0,i.kt)("h2",{id:"github-actions"},"GitHub Actions"),(0,i.kt)("p",null,"GitHub gives the ability to create, reuse and share actions, which can be easily described as workloads that can be triggered on a wide range of events."),(0,i.kt)("p",null,"Actions can be only defined at repository level, creating a ",(0,i.kt)("inlineCode",{parentName:"p"},"YAML")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},".github/workflows")," folder. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Actions")," tab available in ",(0,i.kt)("inlineCode",{parentName:"p"},"github.com")," web UI will list the actions defined and show the execution logs."),(0,i.kt)("p",null,"The Open Developer Platform uses GitHub Actions for the following use cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{href:(0,r.Z)("docs/development-infrastructure/project-documentation")},"Building and publishing Project websites")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{href:(0,r.Z)("docs/project-collaboration")},"Tracking meeting attendance")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{href:"https://github.com/finos/open-developer-platform/blob/master/.github/workflows/project-blueprint.yml"},"Validating repository compliance (work in progress)"))),(0,i.kt)("p",null,"To learn how to use GitHub Actions, start reading ",(0,i.kt)("a",{parentName:"p",href:"https://help.github.com/en/actions"},"https://help.github.com/en/actions"),".\nWhen it's time to start writing your first ",(0,i.kt)("inlineCode",{parentName:"p"},".yml")," file, we found extremely helpful the following resources:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token#using-the-github_token-in-a-workflow"},"Using the GITHUB_TOKEN in a workflow")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions"},"Context and expression syntax")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.github.com/v3/activity/events/types/"},"Event Types & Payloads"))),(0,i.kt)("h2",{id:"travis-ci"},"Travis CI"),(0,i.kt)("p",null,"Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub."),(0,i.kt)("p",null,"To enable Travis CI on a Foundation hosted project:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://travis-ci.org/"},"Sign in to Travis CI")," with your Github credentials"),(0,i.kt)("li",{parentName:"ol"},"Access the ",(0,i.kt)("a",{parentName:"li",href:"https://travis-ci.org/profile/symphonyoss"},"Travis CI profile")," and sync your project"),(0,i.kt)("li",{parentName:"ol"},"Add a ",(0,i.kt)("inlineCode",{parentName:"li"},".travis.yml")," file in the root folder of your GitHub repo (check this ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/finos/finos-parent-pom/blob/master/.travis.yml"},".travis.yml")," as example)\na. (optional) If you need to perform variable encryption and other useful commands, install the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/travis-ci/travis.rb"},"Travis CI Client")," (using ",(0,i.kt)("inlineCode",{parentName:"li"},"gem install travis"),")"),(0,i.kt)("li",{parentName:"ol"},"Access ",(0,i.kt)("inlineCode",{parentName:"li"},"https://travis-ci.org/finos/<repository-name>")," and validate the build")),(0,i.kt)("p",null,"Please check the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.travis-ci.com/user/languages/"},"Travis supported languages")," and how to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.travis-ci.com/user/customizing-the-build"},"customize your build")," to understand if your language is supported and how to configure additional build features."),(0,i.kt)("p",null,"A badge can be added at the top of the project's root-level ",(0,i.kt)("inlineCode",{parentName:"p"},"README.md")," file, using the following Markdown syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[![Build Status](https://travis-ci.org/finos/<repository name>.svg)](https://travis-ci.org/finos/<repository name>)\n")),(0,i.kt)("h3",{id:"example-of-configuring-integration-testing"},"Example of Configuring Integration Testing"),(0,i.kt)("p",null,"In order to run this sample (some Symphony sample bots), the Travis build needs to be configured to add the following items:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'# Download certificate before the build script runs\nbefore_script: "curl -s https://raw.githubusercontent.com/symphonyoss/contrib-toolbox/master/scripts/download-files.sh | bash"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# Define environment variables with Symphony Pod endpoints\nenv:\n global:\n  - FOUNDATION_API_URL=https://foundation-dev-api.symphony.com\n  - FOUNDATION_POD_URL=https://foundation-dev.symphony.com\n  - SESSIONAUTH_URL=$FOUNDATION_API_URL/sessionauth\n  - KEYAUTH_URL=$FOUNDATION_API_URL/keyauth\n  - POD_URL=$FOUNDATION_POD_URL/pod\n  - AGENT_URL=$FOUNDATION_POD_URL/agent\n")),(0,i.kt)("p",null,"At this point, the certificates are in place and downloaded into the build box; integration tests can resolve User Identity certificates by accessing environment variables."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/symphonyoss/symphony-java-sample-bots/"},"symphony-java-sample-bots")," was amongst the first Foundation projects that was enabled to run integration tests from Travis CI; the ",(0,i.kt)("a",{parentName:"p",href:"https://travis-ci.org/symphonyoss/symphony-java-sample-bots/"},"Travis build logs")," for this project show the info below."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The (hidden) environment variables that identify User Identity certificates (in this case 2, one for the message sender, one for the message receiver)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# Setting environment variables from repository settings\n$ export DOWNLOAD_PATH=[secure]\n$ export DOWNLOAD_ITEMS=[secure]\n$ export TRUSTSTORE_FILE=[secure]\n$ export TRUSTSTORE_PASSWORD=[secure]\n$ export BOT_USER_EMAIL=[secure]\n$ export BOT_USER_CERT_FILE=[secure]\n$ export SENDER_USER_EMAIL=[secure]\n$ export SENDER_USER_CERT_FILE=[secure]\n$ export DOWNLOAD_HOST=[secure]\n$ export SENDER_USER_CERT_PASSWORD=[secure]\n$ export BOT_USER_CERT_PASSWORD=[secure]\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The integration test logs of a successful run")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning org.symphonyoss.simplebot.EchoBotIT\nchat initialised\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.132 sec - in org.symphonyoss.simplebot.EchoBotIT\n \nResults :\n \nTests run: 1, Failures: 0, Errors: 0, Skipped: 0\n")),(0,i.kt)("h4",{id:"known-certificate-issues"},"Known Certificate Issues"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Caused by: javax.crypto.BadPaddingException: Given final block not properly padded at\norg.symphonyoss.simplebot.EchoBotIT.sendAndReceiveEcho(EchoBotIT.java:64)\n")),(0,i.kt)("p",null,"This basically means that the certificate password is wrong; to validate the certificate using the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"openssl pkcs12 -info -nodes \\\n-in <certificate_path> \\\n-passin pass:<certificate_password>\n")),(0,i.kt)("p",null,"Reminder for Foundation staff: every password symbol must be escaped by prefixing it with character \u2018\\\u2019, before setting it as Travis environment variable."),(0,i.kt)("h4",{id:"branch-specific-build-commands"},"Branch specific build commands"),(0,i.kt)("p",null,"Travis CI does not provide a syntax to specify branch-specific build commands; however, it is possible to use the following ",(0,i.kt)("inlineCode",{parentName:"p"},".travis.yml")," syntax to workaround it; in this example, the Maven build will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sonar")," profile only if the current branch is master."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'script:\n- "[[ $TRAVIS_BRANCH =~ master ]] && mvn clean deploy -Pintegration-testing,sonar --settings settings.xml"\n- "[[ $TRAVIS_BRANCH =~ dev ]] && mvn clean deploy -Pintegration-testing --settings settings.xml"\n')),(0,i.kt)("h2",{id:"azure-pipelines"},"Azure Pipelines"),(0,i.kt)("p",null,"FINOS can provide projects with Azure Pipelines integration on ",(0,i.kt)("a",{parentName:"p",href:"https://dev.azure.com/finosfoundation"},"https://dev.azure.com/finosfoundation"),"."),(0,i.kt)("p",null,"You can follow docs on the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/devops/pipelines/create-first-pipeline"},"Microsoft docs page")),(0,i.kt)("h2",{id:"myget"},"MyGet"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://myget.org/"},"Myget")," is a friction-free continuous integration & delivery for your nuget, npm, bower and vsix packages; the Foundation provides package repositories, which allow:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Pre-release build and publishing"),", using build environments that are equipped with .NET Framework and Visual Studio (headless); it also features source code tagging and version updates on source code based on incremental build number, to fully automate the package publishing pipeline"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Sync with NuGet"),", that can be either manual (promoting pre-releases to releases using MyGet web interface) or automatic (a committer must create a personal account on MyGet and request access from the Foundation in order to be able to push packages)")),(0,i.kt)("p",null,"In order to request a project to be integrated with MyGet, a Project lead can sign up to MyGet and email ",(0,i.kt)("a",{parentName:"p",href:"mailto:help@finos.org"},"help@finos.org")," the following info:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Project coordinates - GitHub project url and other useful info"),(0,i.kt)("li",{parentName:"ol"},"MyGet username"),(0,i.kt)("li",{parentName:"ol"},"CSProj and CS files - Where project descriptors are located"),(0,i.kt)("li",{parentName:"ol"},"Packages - A list of the packages that need to be published; by default all packages are taken into account"),(0,i.kt)("li",{parentName:"ol"},"Publishing strategy to NuGet - Whether to enable automatic publishing based on source code branching or rely on manual package pushing using the MyGet interface; if the latter, a MyGet personal account username must be provided")),(0,i.kt)("p",null,"An example of project building with MyGet is the Symphony ",(0,i.kt)("a",{parentName:"p",href:"https://symphonyoss.atlassian.net/wiki/github.com/symphonyoss/RestApiClient"},"RestApiClient project"),", which is also published on the ",(0,i.kt)("a",{parentName:"p",href:"https://www.myget.org/feed/ssf-restapiclient/package/nuget/SymphonyOSS.RestApiClient"},"FINOS MyGet repository")," and ",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/SymphonyOSS.RestApiClient/"},"NuGet"),"."),(0,i.kt)("p",null,"Badges can be added at the top of the project's root-level ",(0,i.kt)("inlineCode",{parentName:"p"},"README.md")," file, using the following Markdown syntax:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build status: ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[![MyGet Build Status](https://www.myget.org/BuildSource/Badge/<feed name>?identifier=<guid>)](https://www.myget.org/feed/<feed name>/package/nuget/<package name>)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Latest Pre-Release package published: ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[![MyGet Pre Release](https://img.shields.io/myget/<feed name>/v/<package name>.svg)](https://www.myget.org/feed/<feed name>/package/nuget/<package name>)\n")),(0,i.kt)("h2",{id:"release-and-deployment"},"Release and deployment"),(0,i.kt)("h3",{id:"continuous-artifact-deployment-in-java"},"Continuous (artifact) deployment in Java"),(0,i.kt)("p",null,"When using Java, Travis CI can be easily configured to publish new snapshot artifacts on commit; to enable this feature, a project committer can follow these simple steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Follow the Java Snapshot deployment configuration ; as a result, you should have username/password credentials (mentioned below as ",(0,i.kt)("inlineCode",{parentName:"li"},"CI_DEPLOY_USERNAME")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"CI_DEPLOY_PASSWORD"),") to access issues.sonatype.org"),(0,i.kt)("li",{parentName:"ol"},"Email ",(0,i.kt)("a",{parentName:"li",href:"mailto:help@finos.org"},"help@finos.org")," to request permission to deploy artifacts on Maven remote repositories; this action is not required if the developer has already been granted access previously"),(0,i.kt)("li",{parentName:"ol"},"Commit a ",(0,i.kt)("inlineCode",{parentName:"li"},"settings.xml")," file in the project root folder"),(0,i.kt)("li",{parentName:"ol"},"Define ",(0,i.kt)("inlineCode",{parentName:"li"},"CI_DEPLOY_USERNAME")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"CI_DEPLOY_PASSWORD")," variables with Travis CI; make sure that they're encrypted and hidden during the build process; the credentials to use are the ones defined on step 1; if you don't want to share your username/password credentials, you can request and use Nexus tokens"),(0,i.kt)("li",{parentName:"ol"},"Change the ",(0,i.kt)("inlineCode",{parentName:"li"},"mvn")," build command to\na. Invoke the ",(0,i.kt)("inlineCode",{parentName:"li"},"deploy")," goal\nb. Append ",(0,i.kt)("inlineCode",{parentName:"li"},"--settings settings.xml")," at the end of the build command")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://coderwall.com/p/9b_lfq/deploying-maven-artifacts-from-travis"},"This tutorial")," walks through the mentioned steps, with more details and configuration options; a working example of this configuration is the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/symphonyoss/symphony-java-sample-bots/blob/dev/.travis.yml"},"symphony-java-sample-bots project"),"."),(0,i.kt)("h4",{id:"settingsxml-sample"},"settings.xml sample"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<settings xmlns="https://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">\n  <servers>\n    <server>\n      <id>ossrh</id>\n      <username>${env.CI_DEPLOY_USERNAME}</username>\n      <password>${env.CI_DEPLOY_PASSWORD}</password>\n    </server>\n  </servers>\n</settings>\n')),(0,i.kt)("h3",{id:"continuous-release-in-python"},"Continuous release in Python"),(0,i.kt)("p",null,"Travis CI can be configured to use ",(0,i.kt)("a",{parentName:"p",href:"https://python-semantic-release.readthedocs.io/en/latest/"},"python-semantic-release"),", a package that simplifies and automates versioning for python projects; a project lead can email ",(0,i.kt)("a",{parentName:"p",href:"mailto:help@finos.org"},"help@finos.org")," to request Foundation staff to apply the proper Travis CI project settings; packages will be published on behalf of the FINOS pypi user."),(0,i.kt)("h3",{id:"continuous-release-in-nodejs"},"Continuous release in NodeJS"),(0,i.kt)("p",null,"Travis CI can easily publish packages to npm using ",(0,i.kt)("a",{parentName:"p",href:"https://semantic-release.org/"},"semantic-release.org"),", which delegates release operations to your CI environment and allows you to control versioning ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/commitizen"},"using commits (commitizen)"),"; as a result, npm packages will be continuously released on each code repository change."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"javascript"},"Follow our instructions")," on how to register a package and user in the Foundation npm organisation."))}m.isMDXComponent=!0}}]);